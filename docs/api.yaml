openapi: 3.0.1
info:
  version: 1.0.0
  title: Matrix Synapse Admin Api
  description: The Admin Api for a Matrix Synapse server.
servers:
  - url: https://{domain}:{port}/_synapse/admin
    variables:
      domain:
        default: 'matrix.org'
        description: 'The domain for the synapse server'
      port:
        default: '443'
paths:
  /v2/users/{user_id}:
    put:
      tags:
        - Users
      operationId: putUser
      description: 'This API allows an administrator to create or modify a user account with a specific user_id.'
      parameters:
        - in: path
          name: user_id
          schema:
            type: string
          required: true
          description: 'A fully-qualified user id. For example, @user:server.com.'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: 'When a user was modified.'
        '201':
          description: 'When a new user object was created.'


  /v2/users:
    get:
      tags:
        - Users
      operationId: getUsers
      description: This API returns all local user accounts. By default, the response is ordered by ascending user ID.
      parameters:
        - in: query
          name: user_id
          schema:
            type: string
          required: false
          description: 'Is optional and filters to only return users with user IDs that contain this value. This parameter is ignored when using the name parameter.'
        - in: query
          name: name
          schema:
            type: string
          required: false
          description: 'Is optional and filters to only return users with user ID localparts or displaynames that contain this value.'
        - in: query
          name: guests
          schema:
            type: boolean
          required: false
          description: 'string representing a bool - Is optional and if false will exclude guest users. Defaults to true to include guest users.'
        - in: query
          name: deactivated
          schema:
            type: boolean
          required: false
          description: 'string representing a bool - Is optional and if true will include deactivated users. Defaults to false to exclude deactivated users.'
        - in: query
          name: limit
          schema:
            type: integer
          required: false
          description: 'string representing a positive integer - Is optional but is used for pagination, denoting the maximum number of items to return in this call. Defaults to 100.'
        - in: query
          name: from
          schema:
            type: integer
          required: false
          description: 'string representing a positive integer - Is optional but used for pagination, denoting the offset in the returned results. This should be treated as an opaque value and not explicitly set to anything other than the return value of next_token from a previous call. Defaults to 0.'
        - in: query
          name: order_by
          schema:
            type: string
          required: false
          description: 'The method by which to sort the returned list of users. If the ordered field has duplicates, the second order is always by ascending name, which guarantees a stable ordering. Valid values are:'
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponseObject'

  /v1/rooms:
    get:
      tags:
        - Rooms
      operationId: getRooms
      description: 'The List Room admin API allows server admins to get a list of rooms on their server. '
      parameters:
        - in: query
          name: from
          description: 'Offset in the returned list. Defaults to 0.'
          schema:
            type: integer
          required: false
        - in: query
          name: limit
          description: 'Maximum amount of rooms to return. Defaults to 100.'
          schema:
            type: integer
          required: false
        - in: query
          name: order_by
          description: 'The method in which to sort the returned list of rooms.'
          required: false
          schema:
            type: string
            enum:
              - alphabetical
              - size
              - name
              - canonical_alias
              - joined_members
              - joined_local_members
              - version
              - creator
              - encryption
              - federatable
              - public
              - join_rules
              - guest_access
              - history_visibility
              - state_events
        - in: query
          name: dir
          description: 'Direction of room order. Either f for forwards or b for backwards. Setting this value to b will reverse the above sort order. Defaults to f.'
          required: false
          schema:
            type: string
            enum:
              - 'f'
              - 'b'
        - in: query
          name: search_term
          required: false
          description: 'Filter rooms by their room name, canonical alias and room id.'
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomsResponse'

  /v1/join/{room_id_or_alias}:
    post:
      tags:
        - Rooms
      operationId: joinRoom
      description: 'This API allows an administrator to join an user account with a given user_id to a room with a given room_id_or_alias. You can only modify the membership of local users. The server administrator must be in the room and have permission to invite users.'
      parameters:
        - in: path
          name: room_id_or_alias
          schema:
            type: string
          required: true
          description: 'The room identifier or alias to join: for example, !636q39766251:server.com.'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JoinRoomRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  room_id:
                    type: string

components:
  schemas:
    JoinRoomRequest:
      description: A Join Room Request
      type: object
      properties:
        user_id:
          type: string
          description: 'Fully qualified user: for example, @user:server.com.'
      required:
        - user_id

    User:
      type: object
      properties:
        name:
          type: string
        is_guest:
          type: boolean
        admin:
          type: boolean
        user_type:
          type: string
        deactivated:
          type: boolean
        erased:
          type: boolean
        shadow_banned:
          type: boolean
        displayname:
          type: string
        avatar_url:
          type: string
        creation_ts:
          type: integer

    ThreePid:
      type: object
      required:
        - medium
        - address
      properties:
        medium:
          type: string
          enum:
            - email
            - msisdn
        address:
          type: string

    ExternalId:
      type: object
      required:
        - auth_provider
        - external_id
      properties:
        auth_provider:
          type: string
        external_id:
          type: string

    UserRequest:
      type: object
      properties:
        password:
          description: "If provided, the user's password is updated and all devices are logged out, unless logout_devices is set to false."
          type: string
        logout_devices:
          description: "If set to false, devices aren't logged out even when password is provided."
          type: boolean
        displayname:
          description: "If set to an empty string (\"\"), the user's display name will be removed."
          type: string
        avatar_url:
          description: "Must be a MXC URI. If set to an empty string (\"\"), the user's avatar is removed."
          type: string
        threepids:
          description: "If provided, the user's third-party IDs (email, msisdn) are entirely replaced with the given list. Each item in the array is an object with the following fields:"
          type: array
          items:
            $ref: '#/components/schemas/ThreePid'
        external_ids:
          description: "Allow setting the identifier of the external identity provider for SSO (Single sign-on). More details are in the configuration manual under the sections sso and oidc_providers."
          type: array
          items:
            $ref: '#/components/schemas/ExternalId'
        admin:
          description: "Whether the user is a homeserver administrator, granting them access to the Admin API, among other things."
          type: boolean
        deactivated:
          description: "If unspecified, deactivation state will be left unchanged."
          type: boolean
        user_type:
          description: "If not provided, the user type will be not be changed. If null is given, the user type will be cleared. Other allowed options are: bot and support."
          type: string
          nullable: true

    UsersResponseObject:
      type: object
      properties:
        next_token:
          type: string
        total:
          type: integer
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'

    Room:
      type: object
      properties:
        room_id:
          type: string
        name:
          type: string
        canonical_alias:
          type: string
        joined_members:
          type: integer
        joined_local_members:
          type: integer
        version:
          type: string
        creator:
          type: string
        encryption:
          type: string
        federatable:
          type: string
        public:
          type: string
        join_rules:
          type: string
          enum:
            - public
            - knock
            - invite
            - private
        guest_access:
          type: string
          enum:
            - can_join
            - forbidden
        history_visibility:
          type: string
          enum:
            - invited
            - joined
            - shared
            - world_readable
        state_events:
          type: integer
        room_type:
          type: string
          nullable: true

    RoomsResponse:
      type: object
      properties:
        offset:
          type: integer
        total_rooms:
          type: integer
        next_batch:
          type: integer
        prev_batch:
          type: integer
        rooms:
          type: array
          items:
            $ref: '#/components/schemas/Room'

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []
